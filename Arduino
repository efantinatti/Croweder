
#include <PubSubClient.h>
#include <WiFiEsp.h>
#include "secrets.h"

/*WiFi and MQTT Parameters*/
//sensitive data is contained in secrets.h
char ssid[] = SECRET_SSID;
char pass[] = SECRET_PASS;
int status=WL_IDLE_STATUS;/*the Wifi radio's status. Used to confirm whether a WiFi adapter is connected.*/


//Setting up WiFi and MQTT Clients
WiFiEspClient client;
PubSubClient mqttClient(client);

//MQTT Parameters Setup
const char mqttServer[] = "sep769.fantinatti.net";
const int mqttPort     = 1883;
const char topic[]  = "SEP769";

const char username[] = "769"; //authentication token here
const char password[] = "DryCatFish123";


/* Defines pins for ultrasonic sensor*/
#define echoPin 2 // attach pin D2 Arduino to pin Echo of HC-SR04
#define trigPin 3 //attach pin D3 Arduino to pin Trig of HC-SR04

/* Define LED Pin*/
#define ledPin 32           //Set the digital 32 to LED

int prev_distance = 2000;
int count = 0;
int adults = 0;
int children = 0;
int record = 0;
int min_distance = 2000;
int heights[20];
int d_to_floor = 72;
int trigger = 5;
long tDelay;
char payload1[20];
char payload2[20];
char payload3[20];

void setup() {
  Serial.begin(115200);
  Serial1.begin(115200);
  
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  d_to_floor = calibrateDistance();
  Serial.print("Calibrated distance: ");
  Serial.println(d_to_floor);
  delay(1000);
  
  //Connect to WiFi
  wifiConnect();

  //Attempt to connect to the MQTT broker
  mqttConnect();
  
  //Setup LED
  pinMode(ledPin,OUTPUT);     //initialize the  led pin as output 

  //Setup ultrasonic sensor
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT

  
}



void loop() {
  // loop to keep mqtt Client Connection
  mqttClient.loop();
  

  int dist = ultraSonic();
  if (prev_distance - dist > trigger && prev_distance <100 && millis()-tDelay > 1000){
    count++;
    tDelay = millis();
    record=1;
    min_distance = dist;
  }
  else if(dist<min_distance && millis()-tDelay <1000){
    min_distance = dist;
  }
  else if (millis()-tDelay>1000 && record==1){
    heights[count-1]= (d_to_floor-min_distance);
    if (heights[count-1] > 0.5){
      adults++;

    }
    else{
      children++;

    }
    
    min_distance = 2000;
    record=0;

    //Send Height, # of Adults, # of Children
    String str1 = "{\"height\":" + String(heights[count-1]) + "}";
    str1.toCharArray(payload1,20);
    String str2 = "{\"adults\":" + String(adults) + "}";
    str2.toCharArray(payload2,20);
    String str3 = "{\"children\":" + String(children) + "}";
    str3.toCharArray(payload3,20);
    
    mqttClient.publish(topic, payload1);
    mqttClient.publish(topic, payload2);
    mqttClient.publish(topic, payload3);
    
    Serial.println(payload1);
    Serial.println(payload2);
    Serial.println(payload3);
    delay(1000);
  }

  
  prev_distance = dist;
  Serial.print("Distance :");
  Serial.println(dist);
  Serial.print("Count :");
  Serial.println(count);
  Serial.print("Min Distance :");
  Serial.println(min_distance);
  Serial.print("Heights :");
  for (int i=0; i<10;i++){Serial.print(heights[i]);Serial.print("   ");}
  Serial.println();
  delay(200);
  if(count>=5){
    digitalWrite(ledPin,HIGH);
  }
  else{
    digitalWrite(ledPin,LOW);
  }

  
  
}

void wifiConnect(){
  /*Initialize WiFi module */
  WiFi.init(&Serial1);
  /* check for the presence of ESP8266, and continue to check until detected */
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    while (true);
  }

  /*attempt to connect to WiFi network if not already connected */
  if ( status != WL_CONNECTED) {
    Serial.print("Attempting to connect to WPA SSID: ");
    Serial.println(ssid);
    WiFi.begin(ssid, pass);
  }
  /*Delay until module connects to the network*/
  while (WiFi.status() !=WL_CONNECTED){
    delay(500);
    Serial.print(".");
  }

  Serial.println("You're connected to the network");
  Serial.println();
}

void mqttConnect(){
  //Set MQTT Server
  mqttClient.setServer(mqttServer,mqttPort);

  Serial.print("Attempting to connect to the MQTT broker: ");
  Serial.println(mqttServer);

  //Keep looping until client is connected
  while (!mqttClient.connected()) {
    if (mqttClient.connect("amirSEP769", username, password )) {
      Serial.println("connected");  
    } 
    else {
      Serial.print("failed with state ");
      Serial.print(mqttClient.state());
      delay(2000);
    }
  }

}

int calibrateDistance(){
  long t = millis();
  int total = 0;
  int i=0;
  while(millis()-t <1000){
    i++;
    total = total+ultraSonic();
  }
  return(int(total/i));
}

int ultraSonic(){
  long duration; // variable for the duration of sound wave travel
  int distance; // variable for the distance measurement
  // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)

  return(distance);
}
